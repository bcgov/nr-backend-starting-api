name: Pull Request

on:
  pull_request:

env:
  REGISTRY: ghcr.io
  NAME: gfp

jobs:
  check_backend:
    name: Check Backend
    outputs:
      build: ${{ steps.check.outputs.build }}
    env:
      TRIGGERS: ('./')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check and process modified files
        id: check
        run: |
          # Fetch main to diff against
          git fetch origin main:refs/remotes/origin/master

          # Trigger build if diff matches any triggers
          TRIGGERS=${{ env.TRIGGERS }}
          while read -r check
          do
              for t in "${TRIGGERS[@]}"; do
                  if [[ "${check}" =~ "${t}" ]]
                  then
                      # Output build=true for next steps
                      echo "::set-output name=build::true"
                      echo -e "${t}\n --> ${check}\n"
                      exit 0
                  fi
              done
          done < <(git diff origin/main --name-only)
          echo "Container build not required"

  build_backend:
    name: Backend Image Build
    runs-on: ubuntu-latest
    needs: check_backend
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        name: Checkout repository and Setup JDK 17

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven
        run: mvn --no-transfer-progress --update-snapshots package

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-backend

  tests_backend:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: check_backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Tests
        run: |
          mvn --no-transfer-progress test

      - name: Report code coverage
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          title: Backend coverage report
          delete-old-comments: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

  sonarcloud:
    name: Static Analysis
    needs: [build_backend, tests_backend]
    if: always() && needs.build_backend.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # Disable shallow clone for SonarCloud analysis
        with:
          fetch-depth: 0

      - name: Cache for backend test results
        id: cache-backend
        uses: actions/cache@v3
        with:
          path: backend/coverage
          key: backend-coverage-${{ github.run_number }}
          restore-keys: |
            backend-coverage-

      - name: Cache for frontend test results
        id: cache-frontend
        uses: actions/cache@v3
        with:
          path: frontend/coverage
          key: frontend-coverage-${{ github.run_number }}
          restore-keys: |
            frontend-coverage-

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.exclusions=**/test/**,.github/**/*
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info
            -Dsonar.cobertura.reportPaths=backend/coverage/cobertura-coverage.xml
            -Dsonar.project.monorepo.enabled=true
            -Dsonar.projectKey=nr-backend-starting-api
            -Dsonar.sources=.
            -Dsonar.tests=src/test

  deploy_dev:
    name: DEV Deployment
    needs:
      - build_backend
      - tests_backend
    if: always() && needs.build_backend.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      ZONE: ${{ github.event.number }}
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Database uses a default build
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ env.ZONE }} | oc apply -f -

          # Clean previous image, if rebuilding
          if [ ${{ needs.build_backend.outputs.build == 'true' }} ]
          then
            # Clear stale images for import/replacement
            oc delete is ${{ env.NAME }}-${{ env.ZONE }}-backend || \
              echo "No previously imported images have been found"
          fi

          # Process and apply template
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-backend | oc apply -f -

          # Clean previous image, if rebuilding
          if [ ${{ needs.build_backend.outputs.build == 'true' }} ]
          then
            # Clear stale images for import/replacement
            oc delete is ${{ env.NAME }}-${{ env.ZONE }}-frontend || \
              echo "No previously imported images have been found"
          fi

          # Process and apply template
          oc process -f .github/openshift/deploy.frontend.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-frontend | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-database -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-backend -w

      - name: DEV Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allow-repeats: false
          message: |
            DEV deployments have completed successfully!

            Backend: [https://${{ env.NAME }}-${{ github.event.number }}-backend.apps.silver.devops.gov.bc.ca/]()
